{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["data","nro","nombre","tipo","App","state","modalActualizar","modalInsertar","form","mostrarModalActualizar","dato","setState","cerrarModalActualizar","mostrarModalInsertar","cerrarModalInsertar","editar","contador","arreglo","map","registro","eliminar","window","confirm","splice","insertar","valorNuevo","length","lista","push","handleChange","e","target","name","value","id","color","onClick","this","isOpen","className","readOnly","type","onChange","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7da166d7.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {\n  Table,\n  Button,\n  Container,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  FormGroup,\n  ModalFooter,\n} from \"reactstrap\";\n\nconst data = [\n  { nro: 1, nombre: \"Voopo x7\", tipo: \"Equipo\" },\n\n];\n\nclass App extends React.Component {\n  state = {\n    data: data,\n    modalActualizar: false,\n    modalInsertar: false,\n    form: {\n      nro: \"\",\n      nombre: \"\",\n      tipo: \"\",\n    },\n  };\n\n  mostrarModalActualizar = (dato) => {\n    this.setState({\n      form: dato,\n      modalActualizar: true,\n    });\n  };\n\n  cerrarModalActualizar = () => {\n    this.setState({ modalActualizar: false });\n  };\n\n  mostrarModalInsertar = () => {\n    this.setState({\n      modalInsertar: true,\n    });\n  };\n\n  cerrarModalInsertar = () => {\n    this.setState({ modalInsertar: false });\n  };\n\n  editar = (dato) => {\n    var contador = 0;\n    var arreglo = this.state.data;\n    arreglo.map((registro) => {\n      if (dato.nro == registro.nro) {\n        arreglo[contador].nombre = dato.nombre;\n        arreglo[contador].tipo = dato.tipo;\n      }\n      contador++;\n    });\n    this.setState({ data: arreglo, modalActualizar: false });\n  };\n\n  eliminar = (dato) => {\n    var opcion = window.confirm(\"Estás Seguro que deseas Eliminar el elemento \"+dato.nro);\n    if (opcion == true) {\n      var contador = 0;\n      var arreglo = this.state.data;\n      arreglo.map((registro) => {\n        if (dato.nro == registro.nro) {\n          arreglo.splice(contador, 1);\n        }\n        contador++;\n      });\n      this.setState({ data: arreglo, modalActualizar: false });\n    }\n  };\n\n  insertar= ()=>{\n    var valorNuevo= {...this.state.form};\n    valorNuevo.nro=this.state.data.length+1;\n    var lista= this.state.data;\n    lista.push(valorNuevo);\n    this.setState({ modalInsertar: false, data: lista });\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      form: {\n        ...this.state.form,\n        [e.target.name]: e.target.value,\n      },\n    });\n  };\n\n  render() {\n\n    return (\n      <>\n        <Container>\n        <br />\n          <Button id=\"btnsalva\" color=\"success\" onClick={()=>this.mostrarModalInsertar()}>añadir sugerencia</Button>\n          <br />\n          <br />\n          <Table>\n            <thead>\n              <tr>\n                <th>nro</th>\n                <th>nombre</th>\n                <th>Tipo</th>\n                <th>botones</th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {this.state.data.map((dato) => (\n                <tr key={dato.nro}>\n                  <td>{dato.nro}</td>\n                  <td>{dato.nombre}</td>\n                  <td>{dato.tipo}</td>\n                  <td>\n                    <Button id=\"btnsalva\"\n                      color=\"primary\"\n                      onClick={() => this.mostrarModalActualizar(dato)}\n                    >\n                      Editar\n                    </Button>{\" \"}\n                    <Button id=\"btnsalva\" color=\"danger\" onClick={()=> this.eliminar(dato)}>Eliminar</Button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </Container>\n\n        <Modal isOpen={this.state.modalActualizar}>\n          <ModalHeader>\n           <div><h3>Editar Registro</h3></div>\n          </ModalHeader>\n\n          <ModalBody>\n            <FormGroup>\n              <label>\n               Nro:\n              </label>\n\n              <input\n                className=\"form-control\"\n                readOnly\n                type=\"text\"\n                value={this.state.form.nro}\n              />\n            </FormGroup>\n\n            <FormGroup>\n              <label>\n                Nombre: \n              </label>\n              <input\n                className=\"form-control\"\n                name=\"nombre\"\n                type=\"text\"\n                onChange={this.handleChange}\n                value={this.state.form.nombre}\n              />\n            </FormGroup>\n\n            <FormGroup>\n              <label>\n                tipo: \n              </label>\n              <input\n                className=\"form-control\"\n                name=\"tipo\"\n                type=\"text\"\n                onChange={this.handleChange}\n                value={this.state.form.tipo}\n              />\n            </FormGroup>\n          </ModalBody>\n\n          <ModalFooter>\n            <Button id=\"btnsalva\"\n              color=\"primary\"\n              onClick={() => this.editar(this.state.form)}\n            >\n              Editar\n            </Button>\n            <Button id=\"btnsalva\"\n              color=\"danger\"\n              onClick={() => this.cerrarModalActualizar()}\n            >\n              Cancelar\n            </Button>\n          </ModalFooter>\n        </Modal>\n\n\n\n        <Modal isOpen={this.state.modalInsertar}>\n          <ModalHeader>\n           <div><h3>Insertar nombre producto</h3></div>\n          </ModalHeader>\n\n          <ModalBody>\n            <FormGroup>\n              <label>\n                Nro: \n              </label>\n\n              <input\n                className=\"form-control\"\n                readOnly\n                type=\"text\"\n                value={this.state.data.length+1}\n              />\n            </FormGroup>\n\n            <FormGroup>\n              <label>\n                Nombre: \n              </label>\n              <input\n                className=\"form-control\"\n                name=\"nombre\"\n                type=\"text\"\n                onChange={this.handleChange}\n              />\n            </FormGroup>\n\n            <FormGroup>\n              <label>\n                Tipo: \n              </label>\n              <input\n                className=\"form-control\"\n                name=\"tipo\"\n                type=\"text\"\n                onChange={this.handleChange}\n              />\n            </FormGroup>\n          </ModalBody>\n\n          <ModalFooter>\n            <Button id=\"btnsalva\"\n              color=\"primary\"\n              onClick={() => this.insertar()}\n            >\n              Insertar\n            </Button>\n            <Button id=\"btnsalva\"\n              className=\"btn btn-danger\"\n              onClick={() => this.cerrarModalInsertar()}\n            >\n              Cancelar\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}